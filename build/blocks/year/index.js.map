{"version":3,"file":"blocks/year/index.js","mappings":"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","sources":["webpack://mve-timeline/external window \"React\"","webpack://mve-timeline/external window [\"wp\",\"blockEditor\"]","webpack://mve-timeline/external window [\"wp\",\"blocks\"]","webpack://mve-timeline/external window [\"wp\",\"components\"]","webpack://mve-timeline/external window [\"wp\",\"coreData\"]","webpack://mve-timeline/external window [\"wp\",\"data\"]","webpack://mve-timeline/webpack/bootstrap","webpack://mve-timeline/webpack/runtime/compat get default export","webpack://mve-timeline/webpack/runtime/define property getters","webpack://mve-timeline/webpack/runtime/hasOwnProperty shorthand","webpack://mve-timeline/webpack/runtime/make namespace object","webpack://mve-timeline/./src/blocks/year/index.js"],"sourcesContent":["module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"coreData\"];","module.exports = window[\"wp\"][\"data\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBlockType } from '@wordpress/blocks';\nimport { __experimentalText as Text, TextControl, Card, CardBody, CardHeader, __experimentalHeading as Heading, SelectControl, __experimentalHStack as HStack } from '@wordpress/components';\nimport { useSelect, useDispatch, dispatch, subscribe, select } from '@wordpress/data';\nimport { useEntityProp } from '@wordpress/core-data';\nimport { useBlockProps } from '@wordpress/block-editor';\n\nregisterBlockType('mve-timeline/year', {\n    edit: ({ setAttributes, attributes }) => {\n        const blockProps = useBlockProps();\n        const postType = useSelect(\n            (select) => select('core/editor').getCurrentPostType(),\n            []\n        );\n\n        const postId = useSelect(\n            (select) => select('core/editor').getCurrentPostId(),\n            []\n        );\n\n        const { editEntityRecord } = useDispatch('core');\n\n        const tags = useSelect((select) => {\n            return select('core').getEntityRecords('taxonomy', 'mve_timeline', { orderBy: 'name', 'order': 'asc', 'per_page': -1 }); // name and slug\n        });\n\n        const currentTags = useSelect(\n            (select) => select('core/editor').getEditedPostAttribute('mve_timeline'),\n            []\n        );\n\n        const options = [{\n            value: 0,\n            label: 'Choose timeline...'\n        }].concat(tags ? tags.map((tag) => {\n            return {\n                value: tag.id,\n                label: tag.name\n            };\n        }) : []);\n\n        function onChangeTimeline(value) {\n            value = parseInt(value, 10);\n            editEntityRecord('postType', 'mve_timeline_item', postId, {\n                'mve_timeline': !isNaN(value) ? [parseInt(value, 10)] : [0]\n            });\n        }\n\n        const [meta, setMeta] = useEntityProp('postType', postType, 'meta');\n\n        const valueYear = meta['mve_timeline_year'] ?? '';\n        const valueYearEnd = meta['mve_timeline_year_end'] ?? '';\n\n        const updateYear = (newValue) => {\n            if (newValue === '') {\n                setMeta({ ...meta, mve_timeline_year: null });\n            } else {\n                newValue = parseInt(newValue, 10);\n                setMeta({ ...meta, mve_timeline_year: !isNaN(newValue) ? newValue.toString() : null });\n            }\n        };\n\n        const updateYearEnd = (newValue) => {\n            if (newValue === '') {\n                setMeta({ ...meta, mve_timeline_year_end: null });\n            } else {\n                newValue = parseInt(newValue, 10);\n                setMeta({ ...meta, mve_timeline_year_end: !isNaN(newValue) ? newValue.toString() : null });\n            }\n        };\n\n        return (\n            <Card {...blockProps}>\n                <CardHeader>\n                    <Heading level={4}>Year and timeline</Heading>\n                </CardHeader>\n                <CardBody>\n                    <HStack>\n                        <TextControl onChange={updateYear} value={valueYear} label=\"Year start\" />\n                        <TextControl onChange={updateYearEnd} value={valueYearEnd} label=\"Year end\" />\n                    </HStack>\n                    <SelectControl label=\"Timeline\" options={options} onChange={onChangeTimeline} value={currentTags ? currentTags[0] : ''} />\n                </CardBody>\n            </Card>\n        );\n    },\n\n    // No information saved to the block.\n    // Data is saved to post meta via the hook.\n    save: () => {\n        return null;\n    },\n});"],"names":["registerBlockType","__experimentalText","Text","TextControl","Card","CardBody","CardHeader","__experimentalHeading","Heading","SelectControl","__experimentalHStack","HStack","useSelect","useDispatch","dispatch","subscribe","select","useEntityProp","useBlockProps","edit","setAttributes","attributes","_meta$mve_timeline_ye","_meta$mve_timeline_ye2","blockProps","postType","getCurrentPostType","postId","getCurrentPostId","editEntityRecord","tags","getEntityRecords","orderBy","currentTags","getEditedPostAttribute","options","value","label","concat","map","tag","id","name","onChangeTimeline","parseInt","isNaN","meta","setMeta","valueYear","valueYearEnd","updateYear","newValue","mve_timeline_year","toString","updateYearEnd","mve_timeline_year_end","createElement","level","onChange","save"],"sourceRoot":""}